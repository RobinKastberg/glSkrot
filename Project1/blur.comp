//#extension GL_ARB_compute_variable_group_size : enable
//#ifdef GL_ARB_compute_variable_group_size
//layout(local_size_variable) in;
//#else
layout(local_size_x =256) in;
//#endif
layout(rgba8, binding = 0) uniform image2D img_input;
layout(binding = 5) uniform sampler2D depth;
#define IMG(x,y) imageLoad(img_input, ivec2(x, y))
#define IMGT(x,y) imageLoad(img_input, ivec2(y, x))
#define IMG_STORE(x,y,value) imageStore(img_input, ivec2(x, y), value);
#define IMG_STORET(x,y,value) imageStore(img_input, ivec2(y, x), value);
#define DEPTH(x,y) texture(depth, vec2((float(x)+0.5)/width, (float(y)+0.5)/height)).r
#define DEPTHT(x,y) DEPTH(y,x)
uniform bool horizontal = false;

const float FAR = 0.999;
const float NEAR = 0.95;
void main() {
  const uvec3 id = gl_GlobalInvocationID;
  const unsigned int width = imageSize(img_input).x;
  const unsigned int height = imageSize(img_input).y;
  if(!horizontal) // && id.x < width)
  {
	  vec4 current[2];
	  vec4 pixel = IMG(id.x, 0) + IMG(id.x, 1) + IMG(id.x, 2);
		pixel /= 3.0;
	  //IMG_STORE(id.x, 0, IMG(id.x, 0));
	  current[0] = IMG(id.x, 0);
	  //IMG_STORE(id.x, 1, pixel);
	  current[1] = pixel;
	for(int i=2;i<height-1;i++)
	{
		vec4 l1 = IMG(id.x, i+1);
		vec4 l2 = IMG(id.x, i-2);
		pixel += (l1 - l2)/3.0;
		
		if(DEPTH(id.x, i-2) > FAR || DEPTH(id.x, i-2) < NEAR)
			//IMG_STORE(id.x, i-2, vec4(1,0,0,1));
			IMG_STORE(id.x, i-2, current[0]);
		current[0] = current[1];
		current[1] = pixel;
	}
		IMG_STORE(id.x, height-1, IMG(id.x, height-1));
	}

	  if(horizontal) // && id.x < height)
	{
	  vec4 current[2];
	  vec4 pixel = IMGT(id.x, 0) + IMGT(id.x, 1) + IMGT(id.x, 2);
		pixel /= 3.0;
	  //IMG_STORE(id.x, 0, IMG(id.x, 0));
	  current[0] = IMGT(id.x, 0);
	  //IMG_STORE(id.x, 1, pixel);
	  current[1] = pixel;
	for(int i=2;i<width-1;i++)
	{
		vec4 l1 = IMGT(id.x, i+1);
		vec4 l2 = IMGT(id.x, i-2);
		pixel += (l1 - l2)/3.0;
		if(DEPTHT(id.x, i-2) > FAR || DEPTHT(id.x, i-2) < NEAR)
			//IMG_STORET(id.x, i-2, vec4(1,0,0,1));
			IMG_STORET(id.x, i-2, current[0]);
		current[0] = current[1];
		current[1] = pixel;
	}
		IMG_STORET(id.x, width-1, IMGT(id.x, width-1));
	}
}